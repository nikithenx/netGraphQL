@page "/"

@inject INetGraphQLClient _client
@inject ISnackbar Snackbar

@if (_isLoading)
{
    <Loading />
}
else 
{
    @if (_authors is not null)
    {
        <MudGrid class="py-4">
            @foreach (var item in _authors)
            {
                <MudItem xs="12" sm="6" md="4">
                    <AuthorCard Author="@item" OnDelete="OnDeleteAuthorAsync" />
                </MudItem>
            }
        </MudGrid>
    }
    else 
    {
        <Error />
    }
}

@code {

    private List<IGetAuthors_Authors> _authors;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {      
        _authors = (await GetAuthorsAsync())?.ToList();
        _isLoading = false;
    }

    private async Task<IReadOnlyList<IGetAuthors_Authors>> GetAuthorsAsync()
    {
        var result = await _client.GetAuthors.ExecuteAsync();
        if (result.IsSuccessResult())
        {
            return result.Data?.Authors;
        }
        return null;
    }

    private async Task OnDeleteAuthorAsync(int authorId)
    {
        if (authorId > 0)
        {
            var result = await _client.DeleteAuthor.ExecuteAsync(authorId);
            if (result.IsSuccessResult())
            {
                 _ = _authors.RemoveAll(x => x.Id == authorId);
                 Snackbar.Add("Author deleted successfully", Severity.Success);
            }
            else 
            {
                Snackbar.Add("Error in deleting Author", Severity.Error);
            }
        }
    }
}